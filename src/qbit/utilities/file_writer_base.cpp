#include "qbit/utilities/file_writer_base.h"

#include <boost/algorithm/string.hpp>
#include <chrono>
#include <ctime>
#include <stdexcept>

namespace qbit
{

FileWriterBase::FileWriterBase(const std::string& file_name, FileFormats::Type t, bool open_file, const std::ios_base::openmode mode)
:
file_name_(file_name),
comment_mark_(FileWriterBase::default_comment_mark()),
t_(t)
{

    if(open_file){
        open(mode);
    }
}

FileWriterBase::~FileWriterBase(){
    close();
}

void
FileWriterBase::close(){

    if(file_.is_open())
       file_.close();
}

void
FileWriterBase::open(std::ios_base::openmode mode){

    std::string suffix = FileFormats::type_to_string(t_);

    /// attempt to split the file name and check if a suffix has been given
    /// if yes check if this is the same with the file type
    std::vector<std::string> cont;
    boost::split(cont, file_name_, boost::is_any_of("."));

    if(cont.size() == 2){

        if( cont[1] != suffix){
            throw std::logic_error("File already has a suffix but this does not match with what was given "+cont[1]+" != "+suffix);
        }
        else{

            file_.open(file_name_, mode);
        }
    }
    else if(cont.size() > 2){
        throw std::logic_error("More than one suffixes found in the file name");
    }
    else{

        std::string filename = file_name_+"."+suffix;
        file_.open(filename, mode);
    }
}

void FileWriterBase::write_header(){

    //if the file is not open
    if(!is_open()){
        throw std::logic_error("File "+file_name_+" is not open");
    }

    std::chrono::time_point<std::chrono::system_clock> now;
    now = std::chrono::system_clock::now();
    std::time_t now_time = std::chrono::system_clock::to_time_t(now);
    file_<<comment_mark_;
    file_<<"File Generated by qbit at: "<<std::ctime(&now_time);
    file_.flush();
}

}
